# Makefile.in generated by automake 1.6.3 from Makefile.am.
# KDE tags expanded automatically by am_edit - $Revision: 1.5 $ 
# @configure_input@

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@
SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
top_builddir = ..

ACLOCAL = @ACLOCAL@
AUTOCONF = @AUTOCONF@
AUTOMAKE = @AUTOMAKE@
AUTOHEADER = @AUTOHEADER@

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_HEADER = $(INSTALL_DATA)
transform = @program_transform_name@
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_alias = @build_alias@
build_triplet = @build@
host_alias = @host_alias@
host_triplet = @host@
target_alias = @target_alias@
target_triplet = @target@

EXEEXT = @EXEEXT@
OBJEXT = @OBJEXT@
PATH_SEPARATOR = @PATH_SEPARATOR@
AMTAR = @AMTAR@
ARTSCCONFIG = @ARTSCCONFIG@
AS = @AS@
AUTODIRS = @AUTODIRS@
AWK = @AWK@
BROCKENBORING = @BROCKENBORING@
CC = @CC@
CONF_FILES = @CONF_FILES@
CPP = @CPP@
CXX = @CXX@
CXXCPP = @CXXCPP@
DCOPIDL = @DCOPIDL@
DCOPIDL2CPP = @DCOPIDL2CPP@
DCOP_DEPENDENCIES = @DCOP_DEPENDENCIES@
DEPDIR = @DEPDIR@
DLLTOOL = @DLLTOOL@
DOXYGEN = @DOXYGEN@
DOXYGEN_PROJECT_NAME = @DOXYGEN_PROJECT_NAME@
DOXYGEN_PROJECT_NUMBER = @DOXYGEN_PROJECT_NUMBER@
DPMSINC = @DPMSINC@
DPMSLIB = @DPMSLIB@
ECHO = @ECHO@
FRAMEWORK_COREAUDIO = @FRAMEWORK_COREAUDIO@
GCJ = @GCJ@
GCJFLAGS = @GCJFLAGS@
GLINC = @GLINC@
GLLIB = @GLLIB@
GMSGFMT = @GMSGFMT@
IDL = @IDL@
IDL_DEPENDENCIES = @IDL_DEPENDENCIES@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
JAR = @JAR@
JAVAC = @JAVAC@
JAVAH = @JAVAH@
JVMLIBS = @JVMLIBS@
KDECONFIG = @KDECONFIG@
KDE_EXTRA_RPATH = @KDE_EXTRA_RPATH@
KDE_HAS_DOXYGEN = @KDE_HAS_DOXYGEN@
KDE_HAVE_DOT = @KDE_HAVE_DOT@
KDE_INCLUDES = @KDE_INCLUDES@
KDE_LDFLAGS = @KDE_LDFLAGS@
KDE_MT_LDFLAGS = @KDE_MT_LDFLAGS@
KDE_MT_LIBS = @KDE_MT_LIBS@
KDE_NO_UNDEFINED = @KDE_NO_UNDEFINED@
KDE_PLUGIN = @KDE_PLUGIN@
KDE_RPATH = @KDE_RPATH@
KDE_USE_CLOSURE_FALSE = @KDE_USE_CLOSURE_FALSE@
KDE_USE_CLOSURE_TRUE = @KDE_USE_CLOSURE_TRUE@
KDE_USE_FINAL_FALSE = @KDE_USE_FINAL_FALSE@
KDE_USE_FINAL_TRUE = @KDE_USE_FINAL_TRUE@
KDE_USE_NMCHECK_FALSE = @KDE_USE_NMCHECK_FALSE@
KDE_USE_NMCHECK_TRUE = @KDE_USE_NMCHECK_TRUE@
KDE_XSL_STYLESHEET = @KDE_XSL_STYLESHEET@
LEX = @LEX@
LEXLIB = @LEXLIB@
LEX_OUTPUT_ROOT = @LEX_OUTPUT_ROOT@
LIBBZ2 = @LIBBZ2@
LIBCOMPAT = @LIBCOMPAT@
LIBCRYPT = @LIBCRYPT@
LIBDL = @LIBDL@
LIBGEN = @LIBGEN@
LIBJPEG = @LIBJPEG@
LIBMICO = @LIBMICO@
LIBOBJS = @LIBOBJS@
LIBPNG = @LIBPNG@
LIBPTHREAD = @LIBPTHREAD@
LIBPYTHON = @LIBPYTHON@
LIBQIMGIO = @LIBQIMGIO@
LIBRESOLV = @LIBRESOLV@
LIBSHADOW = @LIBSHADOW@
LIBSM = @LIBSM@
LIBSOCKET = @LIBSOCKET@
LIBSSL = @LIBSSL@
LIBTIFF = @LIBTIFF@
LIBTOOL = @LIBTOOL@
LIBUCB = @LIBUCB@
LIBUTIL = @LIBUTIL@
LIBZ = @LIBZ@
LIB_JASPER = @LIB_JASPER@
LIB_KAB = @LIB_KAB@
LIB_KABC = @LIB_KABC@
LIB_KDECORE = @LIB_KDECORE@
LIB_KDEPRINT = @LIB_KDEPRINT@
LIB_KDEUI = @LIB_KDEUI@
LIB_KFILE = @LIB_KFILE@
LIB_KFM = @LIB_KFM@
LIB_KHTML = @LIB_KHTML@
LIB_KIMGIO = @LIB_KIMGIO@
LIB_KIO = @LIB_KIO@
LIB_KPARTS = @LIB_KPARTS@
LIB_KSPELL = @LIB_KSPELL@
LIB_KSYCOCA = @LIB_KSYCOCA@
LIB_POLL = @LIB_POLL@
LIB_QPE = @LIB_QPE@
LIB_QT = @LIB_QT@
LIB_QTOPIA = @LIB_QTOPIA@
LIB_SMB = @LIB_SMB@
LIB_X11 = @LIB_X11@
LIB_XEXT = @LIB_XEXT@
LIB_XRENDER = @LIB_XRENDER@
LN_S = @LN_S@
MCOPIDL = @MCOPIDL@
MEINPROC = @MEINPROC@
MICO_INCLUDES = @MICO_INCLUDES@
MICO_LDFLAGS = @MICO_LDFLAGS@
MOC = @MOC@
MSGFMT = @MSGFMT@
NOOPT_CFLAGS = @NOOPT_CFLAGS@
NOOPT_CXXFLAGS = @NOOPT_CXXFLAGS@
OBJC = @OBJC@
OBJCFLAGS = @OBJCFLAGS@
OBJDUMP = @OBJDUMP@
PACKAGE = @PACKAGE@
PAMLIBS = @PAMLIBS@
PASSWDLIBS = @PASSWDLIBS@
PYTHONINC = @PYTHONINC@
PYTHONLIB = @PYTHONLIB@
PYTHONMODDIR = @PYTHONMODDIR@
QTDOCDIR = @QTDOCDIR@
QTE_NORTTI = @QTE_NORTTI@
QTOPIA_INCLUDES = @QTOPIA_INCLUDES@
QT_INCLUDES = @QT_INCLUDES@
QT_LDFLAGS = @QT_LDFLAGS@
RANLIB = @RANLIB@
RC = @RC@
SETUIDFLAGS = @SETUIDFLAGS@
SSL_INCLUDES = @SSL_INCLUDES@
SSL_LDFLAGS = @SSL_LDFLAGS@
STRIP = @STRIP@
TOPSUBDIRS = @TOPSUBDIRS@
UIC = @UIC@
UIC_TR = @UIC_TR@
USER_INCLUDES = @USER_INCLUDES@
USER_LDFLAGS = @USER_LDFLAGS@
USE_EXCEPTIONS = @USE_EXCEPTIONS@
USE_RTTI = @USE_RTTI@
USE_THREADS = @USE_THREADS@
VERSION = @VERSION@
WOVERLOADED_VIRTUAL = @WOVERLOADED_VIRTUAL@
XGETTEXT = @XGETTEXT@
XPMINC = @XPMINC@
XPMLIB = @XPMLIB@
X_EXTRA_LIBS = @X_EXTRA_LIBS@
X_INCLUDES = @X_INCLUDES@
X_LDFLAGS = @X_LDFLAGS@
X_PRE_LIBS = @X_PRE_LIBS@
X_RPATH = @X_RPATH@
all_includes = @all_includes@
all_libraries = @all_libraries@
am__include = @am__include@
am__quote = @am__quote@
idldir = @idldir@
install_sh = @install_sh@
jni_includes = @jni_includes@
kde_appsdir = @kde_appsdir@
kde_bindir = @kde_bindir@
kde_confdir = @kde_confdir@
kde_datadir = @kde_datadir@
kde_htmldir = @kde_htmldir@
kde_icondir = @kde_icondir@
kde_includes = @kde_includes@
kde_libraries = @kde_libraries@
kde_libs_htmldir = @kde_libs_htmldir@
kde_libs_prefix = @kde_libs_prefix@
kde_locale = @kde_locale@
kde_mimedir = @kde_mimedir@
kde_moduledir = @kde_moduledir@
kde_qtver = @kde_qtver@
kde_servicesdir = @kde_servicesdir@
kde_servicetypesdir = @kde_servicetypesdir@
kde_sounddir = @kde_sounddir@
kde_styledir = @kde_styledir@
kde_templatesdir = @kde_templatesdir@
kde_wallpaperdir = @kde_wallpaperdir@
kde_widgetdir = @kde_widgetdir@
kdeinitdir = @kdeinitdir@
micodir = @micodir@
qt_includes = @qt_includes@
qt_libraries = @qt_libraries@
x_includes = @x_includes@
x_libraries = @x_libraries@
xdg_appsdir = @xdg_appsdir@
xdg_directorydir = @xdg_directorydir@

# set the include path for X, qt and KDE
INCLUDES = $(all_includes)

# these are the headers for your project
noinst_HEADERS = ksensors.h aboutcfgdesign.h \
	cpupanel.h cputimepanel.h generalcfgdesign.h generalcfg.h \
	hdsensorslist.h i8ksensorslist.h infopanels.h ksensorscfg.h \
	ksensors.h ksensorssplash.h lmsensordockpanel.h lmsensor.h \
	lmsensorpanel.h lmsensorsalarms.h lmsensorscfgdesign.h \
	lmsensorscfg.h lmsensorschip.h lmsensorsdock.h lmsensors.h \
	lmsensorswidget.h palettecfgdesign.h palettecfg.h panel.h \
	panelsgroup.h processexec.h procinfo.h qbarmeter.h \
	qdialarc.h qlcddraw.h qlcdstring.h rampanel.h sensor.h \
	sensorslist.h systemcfgdesign.h systemcfg.h uptimepanel.h


# let automoc handle all of the meta source files (moc)
#>- METASOURCES = AUTO

#########################################################################
# APPLICATION SECTION
#########################################################################
# this is the program that gets installed.  it's name is used for all
# of the other Makefile.am variables
bin_PROGRAMS = ksensors

# the application source, library search path, and link libraries
#>- ksensors_SOURCES = main.cpp ksensors.cpp aboutcfgdesign.ui \
#>- 		   cpupanel.cpp cputimepanel.cpp generalcfg.cpp \
#>- 		   generalcfgdesign.ui hdsensorslist.cpp i8ksensorslist.cpp \
#>- 		   infopanels.cpp ksensorscfg.cpp \
#>- 		   ksensorssplash.cpp lmsensor.cpp lmsensordockpanel.cpp \
#>- 		   lmsensorpanel.cpp lmsensorsalarms.cpp lmsensorscfg.cpp \
#>- 		   lmsensorscfgdesign.ui lmsensorschip.cpp lmsensors.cpp \
#>- 		   lmsensorsdock.cpp lmsensorswidget.cpp palettecfg.cpp \
#>- 		   palettecfgdesign.ui panel.cpp panelsgroup.cpp \
#>- 		   processexec.cpp procinfo.cpp qbarmeter.cpp \
#>- 		   qdialarc.cpp qlcdraw.cpp qlcdstring.cpp \
#>- 		   rampanel.cpp sensor.cpp sensorslist.cpp \
#>- 		   systemcfg.cpp systemcfgdesign.ui uptimepanel.cpp
#>+ 13
ksensors_SOURCES=main.cpp ksensors.cpp  \
		   cpupanel.cpp cputimepanel.cpp generalcfg.cpp \
		    hdsensorslist.cpp i8ksensorslist.cpp \
		   infopanels.cpp ksensorscfg.cpp \
		   ksensorssplash.cpp lmsensor.cpp lmsensordockpanel.cpp \
		   lmsensorpanel.cpp lmsensorsalarms.cpp lmsensorscfg.cpp \
		    lmsensorschip.cpp lmsensors.cpp \
		   lmsensorsdock.cpp lmsensorswidget.cpp palettecfg.cpp \
		    panel.cpp panelsgroup.cpp \
		   processexec.cpp procinfo.cpp qbarmeter.cpp \
		   qdialarc.cpp qlcdraw.cpp qlcdstring.cpp \
		   rampanel.cpp sensor.cpp sensorslist.cpp \
		   systemcfg.cpp  uptimepanel.cpp aboutcfgdesign.cpp generalcfgdesign.cpp lmsensorscfgdesign.cpp palettecfgdesign.cpp systemcfgdesign.cpp


ksensors_LDFLAGS = $(KDE_RPATH) $(all_libraries)
ksensors_LDADD = $(LIB_KDEUI) $(LIB_KDECORE) -lsensors -lm

# this is where the desktop file will go 
shelldesktopdir = $(kde_appsdir)/Utilities
shelldesktop_DATA = ksensors.desktop

# this is where the shell's XML-GUI resource file goes
shellrcdir = $(kde_datadir)/ksensors
shellrc_DATA = ksensorsui.rc

SUBDIRS = pics sounds
subdir = src
mkinstalldirs = $(SHELL) $(top_srcdir)/admin/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
bin_PROGRAMS = ksensors$(EXEEXT)
PROGRAMS = $(bin_PROGRAMS)

am_ksensors_OBJECTS = main.$(OBJEXT) ksensors.$(OBJEXT) \
	cpupanel.$(OBJEXT) cputimepanel.$(OBJEXT) generalcfg.$(OBJEXT) \
	hdsensorslist.$(OBJEXT) i8ksensorslist.$(OBJEXT) \
	infopanels.$(OBJEXT) ksensorscfg.$(OBJEXT) \
	ksensorssplash.$(OBJEXT) lmsensor.$(OBJEXT) \
	lmsensordockpanel.$(OBJEXT) lmsensorpanel.$(OBJEXT) \
	lmsensorsalarms.$(OBJEXT) lmsensorscfg.$(OBJEXT) \
	lmsensorschip.$(OBJEXT) lmsensors.$(OBJEXT) \
	lmsensorsdock.$(OBJEXT) lmsensorswidget.$(OBJEXT) \
	palettecfg.$(OBJEXT) panel.$(OBJEXT) panelsgroup.$(OBJEXT) \
	processexec.$(OBJEXT) procinfo.$(OBJEXT) qbarmeter.$(OBJEXT) \
	qdialarc.$(OBJEXT) qlcdraw.$(OBJEXT) qlcdstring.$(OBJEXT) \
	rampanel.$(OBJEXT) sensor.$(OBJEXT) sensorslist.$(OBJEXT) \
	systemcfg.$(OBJEXT) uptimepanel.$(OBJEXT)
#>- ksensors_OBJECTS = $(am_ksensors_OBJECTS)
#>+ 18
ksensors_final_OBJECTS = ksensors.all_cpp.o 
ksensors_nofinal_OBJECTS = main.$(OBJEXT) ksensors.$(OBJEXT) \
	cpupanel.$(OBJEXT) cputimepanel.$(OBJEXT) generalcfg.$(OBJEXT) \
	hdsensorslist.$(OBJEXT) i8ksensorslist.$(OBJEXT) \
	infopanels.$(OBJEXT) ksensorscfg.$(OBJEXT) \
	ksensorssplash.$(OBJEXT) lmsensor.$(OBJEXT) \
	lmsensordockpanel.$(OBJEXT) lmsensorpanel.$(OBJEXT) \
	lmsensorsalarms.$(OBJEXT) lmsensorscfg.$(OBJEXT) \
	lmsensorschip.$(OBJEXT) lmsensors.$(OBJEXT) \
	lmsensorsdock.$(OBJEXT) lmsensorswidget.$(OBJEXT) \
	palettecfg.$(OBJEXT) panel.$(OBJEXT) panelsgroup.$(OBJEXT) \
	processexec.$(OBJEXT) procinfo.$(OBJEXT) qbarmeter.$(OBJEXT) \
	qdialarc.$(OBJEXT) qlcdraw.$(OBJEXT) qlcdstring.$(OBJEXT) \
	rampanel.$(OBJEXT) sensor.$(OBJEXT) sensorslist.$(OBJEXT) \
	systemcfg.$(OBJEXT) uptimepanel.$(OBJEXT) aboutcfgdesign.$(OBJEXT) generalcfgdesign.$(OBJEXT) lmsensorscfgdesign.$(OBJEXT) palettecfgdesign.$(OBJEXT) systemcfgdesign.$(OBJEXT)\
panelsgroup.moc.o sensor.moc.o i8ksensorslist.moc.o lmsensorswidget.moc.o panel.moc.o lmsensordockpanel.moc.o lmsensorsalarms.moc.o generalcfg.moc.o hdsensorslist.moc.o infopanels.moc.o ksensorscfg.moc.o systemcfg.moc.o lmsensors.moc.o qlcdstring.moc.o qdialarc.moc.o ksensorssplash.moc.o lmsensorpanel.moc.o qbarmeter.moc.o cpupanel.moc.o palettecfg.moc.o lmsensorschip.moc.o processexec.moc.o uptimepanel.moc.o sensorslist.moc.o lmsensorsdock.moc.o lmsensorscfg.moc.o lmsensor.moc.o 
@KDE_USE_FINAL_FALSE@ksensors_OBJECTS = $(ksensors_nofinal_OBJECTS)
@KDE_USE_FINAL_TRUE@ksensors_OBJECTS = $(ksensors_final_OBJECTS)
ksensors_DEPENDENCIES =

DEFS = @DEFS@
DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
depcomp = $(SHELL) $(top_srcdir)/admin/depcomp
am__depfiles_maybe = depfiles
#>- @AMDEP_TRUE@DEP_FILES = ./$(DEPDIR)/cpupanel.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/cputimepanel.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/generalcfg.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/hdsensorslist.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/i8ksensorslist.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/infopanels.Po ./$(DEPDIR)/ksensors.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/ksensorscfg.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/ksensorssplash.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/lmsensor.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/lmsensordockpanel.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/lmsensorpanel.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/lmsensors.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/lmsensorsalarms.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/lmsensorscfg.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/lmsensorschip.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/lmsensorsdock.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/lmsensorswidget.Po ./$(DEPDIR)/main.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/palettecfg.Po ./$(DEPDIR)/panel.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/panelsgroup.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/processexec.Po ./$(DEPDIR)/procinfo.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/qbarmeter.Po ./$(DEPDIR)/qdialarc.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/qlcdraw.Po ./$(DEPDIR)/qlcdstring.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/rampanel.Po ./$(DEPDIR)/sensor.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/sensorslist.Po ./$(DEPDIR)/systemcfg.Po \
#>- @AMDEP_TRUE@	./$(DEPDIR)/uptimepanel.Po
#>+ 50
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@DEP_FILES =  $(DEPDIR)/aboutcfgdesign.P $(DEPDIR)/generalcfgdesign.P $(DEPDIR)/lmsensorscfgdesign.P $(DEPDIR)/palettecfgdesign.P $(DEPDIR)/systemcfgdesign.P $(DEPDIR)/panelsgroup.moc.P $(DEPDIR)/sensor.moc.P $(DEPDIR)/i8ksensorslist.moc.P $(DEPDIR)/lmsensorswidget.moc.P $(DEPDIR)/panel.moc.P $(DEPDIR)/lmsensordockpanel.moc.P $(DEPDIR)/lmsensorsalarms.moc.P $(DEPDIR)/generalcfg.moc.P $(DEPDIR)/hdsensorslist.moc.P $(DEPDIR)/infopanels.moc.P $(DEPDIR)/ksensorscfg.moc.P $(DEPDIR)/systemcfg.moc.P $(DEPDIR)/lmsensors.moc.P $(DEPDIR)/qlcdstring.moc.P $(DEPDIR)/qdialarc.moc.P $(DEPDIR)/ksensorssplash.moc.P $(DEPDIR)/lmsensorpanel.moc.P $(DEPDIR)/qbarmeter.moc.P $(DEPDIR)/cpupanel.moc.P $(DEPDIR)/palettecfg.moc.P $(DEPDIR)/lmsensorschip.moc.P $(DEPDIR)/processexec.moc.P $(DEPDIR)/uptimepanel.moc.P $(DEPDIR)/lmsensorsdock.moc.P $(DEPDIR)/lmsensorscfg.moc.P $(DEPDIR)/lmsensor.moc.P  $(DEPDIR)/ksensors.all_cpp.P ./$(DEPDIR)/cpupanel.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/cputimepanel.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/generalcfg.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/hdsensorslist.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/i8ksensorslist.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/infopanels.Po ./$(DEPDIR)/ksensors.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/ksensorscfg.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/ksensorssplash.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/lmsensor.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/lmsensordockpanel.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/lmsensorpanel.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/lmsensors.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/lmsensorsalarms.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/lmsensorscfg.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/lmsensorschip.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/lmsensorsdock.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/lmsensorswidget.Po ./$(DEPDIR)/main.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/palettecfg.Po ./$(DEPDIR)/panel.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/panelsgroup.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/processexec.Po ./$(DEPDIR)/procinfo.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/qbarmeter.Po ./$(DEPDIR)/qdialarc.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/qlcdraw.Po ./$(DEPDIR)/qlcdstring.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/rampanel.Po ./$(DEPDIR)/sensor.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/sensorslist.Po ./$(DEPDIR)/systemcfg.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_TRUE@	@AMDEP_TRUE@	./$(DEPDIR)/uptimepanel.Po
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@DEP_FILES =  $(DEPDIR)/aboutcfgdesign.P $(DEPDIR)/generalcfgdesign.P $(DEPDIR)/lmsensorscfgdesign.P $(DEPDIR)/palettecfgdesign.P $(DEPDIR)/systemcfgdesign.P $(DEPDIR)/panelsgroup.moc.P $(DEPDIR)/sensor.moc.P $(DEPDIR)/i8ksensorslist.moc.P $(DEPDIR)/lmsensorswidget.moc.P $(DEPDIR)/panel.moc.P $(DEPDIR)/lmsensordockpanel.moc.P $(DEPDIR)/lmsensorsalarms.moc.P $(DEPDIR)/generalcfg.moc.P $(DEPDIR)/hdsensorslist.moc.P $(DEPDIR)/infopanels.moc.P $(DEPDIR)/ksensorscfg.moc.P $(DEPDIR)/systemcfg.moc.P $(DEPDIR)/lmsensors.moc.P $(DEPDIR)/qlcdstring.moc.P $(DEPDIR)/qdialarc.moc.P $(DEPDIR)/ksensorssplash.moc.P $(DEPDIR)/lmsensorpanel.moc.P $(DEPDIR)/qbarmeter.moc.P $(DEPDIR)/cpupanel.moc.P $(DEPDIR)/palettecfg.moc.P $(DEPDIR)/lmsensorschip.moc.P $(DEPDIR)/processexec.moc.P $(DEPDIR)/uptimepanel.moc.P $(DEPDIR)/lmsensorsdock.moc.P $(DEPDIR)/lmsensorscfg.moc.P $(DEPDIR)/lmsensor.moc.P ./$(DEPDIR)/cpupanel.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/cputimepanel.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/generalcfg.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/hdsensorslist.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/i8ksensorslist.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/infopanels.Po ./$(DEPDIR)/ksensors.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/ksensorscfg.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/ksensorssplash.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/lmsensor.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/lmsensordockpanel.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/lmsensorpanel.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/lmsensors.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/lmsensorsalarms.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/lmsensorscfg.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/lmsensorschip.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/lmsensorsdock.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/lmsensorswidget.Po ./$(DEPDIR)/main.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/palettecfg.Po ./$(DEPDIR)/panel.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/panelsgroup.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/processexec.Po ./$(DEPDIR)/procinfo.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/qbarmeter.Po ./$(DEPDIR)/qdialarc.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/qlcdraw.Po ./$(DEPDIR)/qlcdstring.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/rampanel.Po ./$(DEPDIR)/sensor.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/sensorslist.Po ./$(DEPDIR)/systemcfg.Po \
@AMDEP_TRUE@@KDE_USE_FINAL_FALSE@	@AMDEP_TRUE@	./$(DEPDIR)/uptimepanel.Po
#>- CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
#>- 	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 2
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
#>- LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) \
#>- 	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
#>- 	$(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 3
LTCXXCOMPILE = $(LIBTOOL) --mode=compile --tag=CXX $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
CXXLD = $(CXX)
#>- CXXLINK = $(LIBTOOL) --mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
#>- 	$(AM_LDFLAGS) $(LDFLAGS) -o $@
#>+ 2
CXXLINK = $(LIBTOOL) --mode=link --tag=CXX $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
CXXFLAGS = @CXXFLAGS@
DIST_SOURCES = $(ksensors_SOURCES)
DATA = $(shelldesktop_DATA) $(shellrc_DATA)

HEADERS = $(noinst_HEADERS)


#>- RECURSIVE_TARGETS = info-recursive dvi-recursive install-info-recursive \
#>- 	uninstall-info-recursive all-recursive install-data-recursive \
#>- 	install-exec-recursive installdirs-recursive install-recursive \
#>- 	uninstall-recursive check-recursive installcheck-recursive
#>+ 4
RECURSIVE_TARGETS = info-recursive dvi-recursive install-info-recursive \
	uninstall-info-recursive all-recursive install-data-recursive \
	install-exec-recursive installdirs-recursive install-recursive \
	uninstall-recursive check-recursive installcheck-recursive nmcheck-recursive bcheck-recursive
DIST_COMMON = $(noinst_HEADERS) Makefile.am Makefile.in
DIST_SUBDIRS = $(SUBDIRS)
SOURCES = $(ksensors_SOURCES)

#>- all: all-recursive
#>+ 1
all: docs-am  all-recursive

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.in $(ACLOCAL_M4)
#>- 	cd $(top_srcdir) && \
#>- 	  $(AUTOMAKE) --gnu  src/Makefile
#>+ 3
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/Makefile
	cd $(top_srcdir) && perl admin/am_edit ksensors-0.7.3/src/Makefile.in
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f $(DESTDIR)$(bindir)/$$f"; \
	  rm -f $(DESTDIR)$(bindir)/$$f; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
ksensors$(EXEEXT): $(ksensors_OBJECTS) $(ksensors_DEPENDENCIES) 
	@rm -f ksensors$(EXEEXT)
	$(CXXLINK) $(ksensors_LDFLAGS) $(ksensors_OBJECTS) $(ksensors_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpupanel.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cputimepanel.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/generalcfg.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hdsensorslist.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/i8ksensorslist.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/infopanels.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ksensors.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ksensorscfg.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ksensorssplash.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lmsensor.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lmsensordockpanel.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lmsensorpanel.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lmsensors.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lmsensorsalarms.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lmsensorscfg.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lmsensorschip.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lmsensorsdock.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lmsensorswidget.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/main.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/palettecfg.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/panel.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/panelsgroup.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/processexec.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/procinfo.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/qbarmeter.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/qdialarc.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/qlcdraw.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/qlcdstring.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/rampanel.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sensor.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sensorslist.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/systemcfg.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/uptimepanel.Po@am__quote@

distclean-depend:
	-rm -rf ./$(DEPDIR)

.cpp.o:
@AMDEP_TRUE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

.cpp.obj:
@AMDEP_TRUE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXXCOMPILE) -c -o $@ `cygpath -w $<`

.cpp.lo:
@AMDEP_TRUE@	source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/$*.Plo' tmpdepfile='$(DEPDIR)/$*.TPlo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(LTCXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<
CXXDEPMODE = @CXXDEPMODE@

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:
shelldesktopDATA_INSTALL = $(INSTALL_DATA)
install-shelldesktopDATA: $(shelldesktop_DATA)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(shelldesktopdir)
	@list='$(shelldesktop_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(shelldesktopDATA_INSTALL) $$d$$p $(DESTDIR)$(shelldesktopdir)/$$f"; \
	  $(shelldesktopDATA_INSTALL) $$d$$p $(DESTDIR)$(shelldesktopdir)/$$f; \
	done

uninstall-shelldesktopDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(shelldesktop_DATA)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(shelldesktopdir)/$$f"; \
	  rm -f $(DESTDIR)$(shelldesktopdir)/$$f; \
	done
shellrcDATA_INSTALL = $(INSTALL_DATA)
install-shellrcDATA: $(shellrc_DATA)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(shellrcdir)
	@list='$(shellrc_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(shellrcDATA_INSTALL) $$d$$p $(DESTDIR)$(shellrcdir)/$$f"; \
	  $(shellrcDATA_INSTALL) $$d$$p $(DESTDIR)$(shellrcdir)/$$f; \
	done

uninstall-shellrcDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(shellrc_DATA)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(shellrcdir)/$$f"; \
	  rm -f $(DESTDIR)$(shellrcdir)/$$f; \
	done

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@set fnord $$MAKEFLAGS; amf=$$2; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@set fnord $$MAKEFLAGS; amf=$$2; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done

ETAGS = etags
ETAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -f $$subdir/TAGS && tags="$$tags -i $$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH
#>- DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
#>+ 1
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST) $(KDE_DIST)

top_distdir = ..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@list='$(DISTFILES)'; for file in $$list; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d $(distdir)/$$subdir \
	    || mkdir $(distdir)/$$subdir \
	    || exit 1; \
	    (cd $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$(top_distdir)" \
	        distdir=../$(distdir)/$$subdir \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-recursive
all-am: Makefile $(PROGRAMS) $(DATA) $(HEADERS)
installdirs: installdirs-recursive
installdirs-am:
	$(mkinstalldirs) $(DESTDIR)$(bindir) $(DESTDIR)$(shelldesktopdir) $(DESTDIR)$(shellrcdir)

install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
#>- clean: clean-recursive
#>+ 1
clean: kde-rpo-clean  clean-recursive

#>- clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am
#>+ 1
clean-am: clean-metasources clean-ui clean-bcheck clean-final  clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-recursive

distclean-am: clean-am distclean-compile distclean-depend \
	distclean-generic distclean-libtool distclean-tags

dvi: dvi-recursive

dvi-am:

info: info-recursive

info-am:

install-data-am: install-shelldesktopDATA install-shellrcDATA

install-exec-am: install-binPROGRAMS

install-info: install-info-recursive

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-recursive

maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

uninstall-am: uninstall-binPROGRAMS uninstall-info-am \
	uninstall-shelldesktopDATA uninstall-shellrcDATA

uninstall-info: uninstall-info-recursive

.PHONY: $(RECURSIVE_TARGETS) GTAGS all all-am check check-am clean \
	clean-binPROGRAMS clean-generic clean-libtool clean-recursive \
	distclean distclean-compile distclean-depend distclean-generic \
	distclean-libtool distclean-recursive distclean-tags distdir \
	dvi dvi-am dvi-recursive info info-am info-recursive install \
	install-am install-binPROGRAMS install-data install-data-am \
	install-data-recursive install-exec install-exec-am \
	install-exec-recursive install-info install-info-am \
	install-info-recursive install-man install-recursive \
	install-shelldesktopDATA install-shellrcDATA install-strip \
	installcheck installcheck-am installdirs installdirs-am \
	installdirs-recursive maintainer-clean maintainer-clean-generic \
	maintainer-clean-recursive mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool mostlyclean-recursive \
	tags tags-recursive uninstall uninstall-am \
	uninstall-binPROGRAMS uninstall-info-am \
	uninstall-info-recursive uninstall-recursive \
	uninstall-shelldesktopDATA uninstall-shellrcDATA


messages: rc.cpp
	$(XGETTEXT) *.cpp -o $(podir)/ksensors.pot
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:


#>+ 3
panelsgroup.moc.cpp: $(srcdir)/panelsgroup.h
	$(MOC) $(srcdir)/panelsgroup.h -o panelsgroup.moc.cpp

#>+ 2
mocs: panelsgroup.moc.cpp

#>+ 3
sensor.moc.cpp: $(srcdir)/sensor.h
	$(MOC) $(srcdir)/sensor.h -o sensor.moc.cpp

#>+ 2
mocs: sensor.moc.cpp

#>+ 3
i8ksensorslist.moc.cpp: $(srcdir)/i8ksensorslist.h
	$(MOC) $(srcdir)/i8ksensorslist.h -o i8ksensorslist.moc.cpp

#>+ 2
mocs: i8ksensorslist.moc.cpp

#>+ 3
lmsensorswidget.moc.cpp: $(srcdir)/lmsensorswidget.h
	$(MOC) $(srcdir)/lmsensorswidget.h -o lmsensorswidget.moc.cpp

#>+ 2
mocs: lmsensorswidget.moc.cpp

#>+ 3
panel.moc.cpp: $(srcdir)/panel.h
	$(MOC) $(srcdir)/panel.h -o panel.moc.cpp

#>+ 2
mocs: panel.moc.cpp

#>+ 3
lmsensordockpanel.moc.cpp: $(srcdir)/lmsensordockpanel.h
	$(MOC) $(srcdir)/lmsensordockpanel.h -o lmsensordockpanel.moc.cpp

#>+ 2
mocs: lmsensordockpanel.moc.cpp

#>+ 3
lmsensorsalarms.moc.cpp: $(srcdir)/lmsensorsalarms.h
	$(MOC) $(srcdir)/lmsensorsalarms.h -o lmsensorsalarms.moc.cpp

#>+ 2
mocs: lmsensorsalarms.moc.cpp

#>+ 3
generalcfg.moc.cpp: $(srcdir)/generalcfg.h
	$(MOC) $(srcdir)/generalcfg.h -o generalcfg.moc.cpp

#>+ 2
mocs: generalcfg.moc.cpp

#>+ 3
hdsensorslist.moc.cpp: $(srcdir)/hdsensorslist.h
	$(MOC) $(srcdir)/hdsensorslist.h -o hdsensorslist.moc.cpp

#>+ 2
mocs: hdsensorslist.moc.cpp

#>+ 3
infopanels.moc.cpp: $(srcdir)/infopanels.h
	$(MOC) $(srcdir)/infopanels.h -o infopanels.moc.cpp

#>+ 2
mocs: infopanels.moc.cpp

#>+ 3
ksensorscfg.moc.cpp: $(srcdir)/ksensorscfg.h
	$(MOC) $(srcdir)/ksensorscfg.h -o ksensorscfg.moc.cpp

#>+ 2
mocs: ksensorscfg.moc.cpp

#>+ 3
systemcfg.moc.cpp: $(srcdir)/systemcfg.h
	$(MOC) $(srcdir)/systemcfg.h -o systemcfg.moc.cpp

#>+ 2
mocs: systemcfg.moc.cpp

#>+ 3
lmsensors.moc.cpp: $(srcdir)/lmsensors.h
	$(MOC) $(srcdir)/lmsensors.h -o lmsensors.moc.cpp

#>+ 2
mocs: lmsensors.moc.cpp

#>+ 3
qlcdstring.moc.cpp: $(srcdir)/qlcdstring.h
	$(MOC) $(srcdir)/qlcdstring.h -o qlcdstring.moc.cpp

#>+ 2
mocs: qlcdstring.moc.cpp

#>+ 3
qdialarc.moc.cpp: $(srcdir)/qdialarc.h
	$(MOC) $(srcdir)/qdialarc.h -o qdialarc.moc.cpp

#>+ 2
mocs: qdialarc.moc.cpp

#>+ 3
ksensorssplash.moc.cpp: $(srcdir)/ksensorssplash.h
	$(MOC) $(srcdir)/ksensorssplash.h -o ksensorssplash.moc.cpp

#>+ 2
mocs: ksensorssplash.moc.cpp

#>+ 3
lmsensorpanel.moc.cpp: $(srcdir)/lmsensorpanel.h
	$(MOC) $(srcdir)/lmsensorpanel.h -o lmsensorpanel.moc.cpp

#>+ 2
mocs: lmsensorpanel.moc.cpp

#>+ 3
qbarmeter.moc.cpp: $(srcdir)/qbarmeter.h
	$(MOC) $(srcdir)/qbarmeter.h -o qbarmeter.moc.cpp

#>+ 2
mocs: qbarmeter.moc.cpp

#>+ 3
ksensors.moc: $(srcdir)/ksensors.h
	$(MOC) $(srcdir)/ksensors.h -o ksensors.moc

#>+ 2
mocs: ksensors.moc

#>+ 3
cpupanel.moc.cpp: $(srcdir)/cpupanel.h
	$(MOC) $(srcdir)/cpupanel.h -o cpupanel.moc.cpp

#>+ 2
mocs: cpupanel.moc.cpp

#>+ 3
palettecfg.moc.cpp: $(srcdir)/palettecfg.h
	$(MOC) $(srcdir)/palettecfg.h -o palettecfg.moc.cpp

#>+ 2
mocs: palettecfg.moc.cpp

#>+ 3
lmsensorschip.moc.cpp: $(srcdir)/lmsensorschip.h
	$(MOC) $(srcdir)/lmsensorschip.h -o lmsensorschip.moc.cpp

#>+ 2
mocs: lmsensorschip.moc.cpp

#>+ 3
processexec.moc.cpp: $(srcdir)/processexec.h
	$(MOC) $(srcdir)/processexec.h -o processexec.moc.cpp

#>+ 2
mocs: processexec.moc.cpp

#>+ 3
uptimepanel.moc.cpp: $(srcdir)/uptimepanel.h
	$(MOC) $(srcdir)/uptimepanel.h -o uptimepanel.moc.cpp

#>+ 2
mocs: uptimepanel.moc.cpp

#>+ 3
sensorslist.moc.cpp: $(srcdir)/sensorslist.h
	$(MOC) $(srcdir)/sensorslist.h -o sensorslist.moc.cpp

#>+ 2
mocs: sensorslist.moc.cpp

#>+ 3
lmsensorsdock.moc.cpp: $(srcdir)/lmsensorsdock.h
	$(MOC) $(srcdir)/lmsensorsdock.h -o lmsensorsdock.moc.cpp

#>+ 2
mocs: lmsensorsdock.moc.cpp

#>+ 3
lmsensorscfg.moc.cpp: $(srcdir)/lmsensorscfg.h
	$(MOC) $(srcdir)/lmsensorscfg.h -o lmsensorscfg.moc.cpp

#>+ 2
mocs: lmsensorscfg.moc.cpp

#>+ 3
lmsensor.moc.cpp: $(srcdir)/lmsensor.h
	$(MOC) $(srcdir)/lmsensor.h -o lmsensor.moc.cpp

#>+ 2
mocs: lmsensor.moc.cpp

#>+ 3
clean-metasources:
	-rm -f  panelsgroup.moc.cpp sensor.moc.cpp i8ksensorslist.moc.cpp lmsensorswidget.moc.cpp panel.moc.cpp lmsensordockpanel.moc.cpp lmsensorsalarms.moc.cpp generalcfg.moc.cpp hdsensorslist.moc.cpp infopanels.moc.cpp ksensorscfg.moc.cpp systemcfg.moc.cpp lmsensors.moc.cpp qlcdstring.moc.cpp qdialarc.moc.cpp ksensorssplash.moc.cpp lmsensorpanel.moc.cpp qbarmeter.moc.cpp ksensors.moc cpupanel.moc.cpp palettecfg.moc.cpp lmsensorschip.moc.cpp processexec.moc.cpp uptimepanel.moc.cpp sensorslist.moc.cpp lmsensorsdock.moc.cpp lmsensorscfg.moc.cpp lmsensor.moc.cpp

#>+ 2
KDE_DIST=ksensors.lsm palettecfgdesign.ui ksensorsui.rc aboutcfgdesign.ui generalcfgdesign.ui lmsensorscfgdesign.ui systemcfgdesign.ui ksensors.desktop 

#>+ 8
clean-ui:
	-rm -f \
	aboutcfgdesign.cpp aboutcfgdesign.h aboutcfgdesign.moc \
	generalcfgdesign.cpp generalcfgdesign.h generalcfgdesign.moc \
	lmsensorscfgdesign.cpp lmsensorscfgdesign.h lmsensorscfgdesign.moc \
	palettecfgdesign.cpp palettecfgdesign.h palettecfgdesign.moc \
	systemcfgdesign.cpp systemcfgdesign.h systemcfgdesign.moc 

#>+ 2
docs-am:

#>+ 6
force-reedit:
		cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/Makefile
	cd $(top_srcdir) && perl admin/am_edit ksensors-0.7.3/src/Makefile.in


#>+ 21
clean-bcheck: 
	rm -f *.bchecktest.cc *.bchecktest.cc.class a.out

bcheck: bcheck-recursive

bcheck-am:
	@for i in ; do \
	    if test $(srcdir)/$$i -nt $$i.bchecktest.cc; then \
	        echo "int main() {return 0;}" > $$i.bchecktest.cc ; \
	        echo "#include \"$$i\"" >> $$i.bchecktest.cc ; \
	        echo "$$i"; \
	        if ! $(CXXCOMPILE)  --dump-class-hierarchy $$i.bchecktest.cc; then \
	            rm -f $$i.bchecktest.cc; exit 1; \
	        fi ; \
	        echo "" >> $$i.bchecktest.cc.class; \
	        perl $(top_srcdir)/admin/bcheck.pl $$i.bchecktest.cc.class || { rm -f $$i.bchecktest.cc; exit 1; }; \
	        rm -f a.out; \
	    fi ; \
	done


#>+ 11
ksensors.all_cpp.cpp: $(srcdir)/Makefile.in $(srcdir)/main.cpp $(srcdir)/ksensors.cpp $(srcdir)/cpupanel.cpp $(srcdir)/cputimepanel.cpp $(srcdir)/generalcfg.cpp $(srcdir)/hdsensorslist.cpp $(srcdir)/i8ksensorslist.cpp $(srcdir)/infopanels.cpp $(srcdir)/ksensorscfg.cpp $(srcdir)/ksensorssplash.cpp $(srcdir)/lmsensor.cpp $(srcdir)/lmsensordockpanel.cpp $(srcdir)/lmsensorpanel.cpp $(srcdir)/lmsensorsalarms.cpp $(srcdir)/lmsensorscfg.cpp $(srcdir)/lmsensorschip.cpp $(srcdir)/lmsensors.cpp $(srcdir)/lmsensorsdock.cpp $(srcdir)/lmsensorswidget.cpp $(srcdir)/palettecfg.cpp $(srcdir)/panel.cpp $(srcdir)/panelsgroup.cpp $(srcdir)/processexec.cpp $(srcdir)/procinfo.cpp $(srcdir)/qbarmeter.cpp $(srcdir)/qdialarc.cpp $(srcdir)/qlcdraw.cpp $(srcdir)/qlcdstring.cpp $(srcdir)/rampanel.cpp $(srcdir)/sensor.cpp $(srcdir)/sensorslist.cpp $(srcdir)/systemcfg.cpp $(srcdir)/uptimepanel.cpp $(srcdir)/aboutcfgdesign.cpp $(srcdir)/generalcfgdesign.cpp $(srcdir)/lmsensorscfgdesign.cpp $(srcdir)/palettecfgdesign.cpp $(srcdir)/systemcfgdesign.cpp sensor.moc.cpp panelsgroup.moc.cpp i8ksensorslist.moc.cpp lmsensordockpanel.moc.cpp generalcfg.moc.cpp infopanels.moc.cpp ksensorscfg.moc.cpp qdialarc.moc.cpp qlcdstring.moc.cpp lmsensorpanel.moc.cpp ksensorssplash.moc.cpp processexec.moc.cpp lmsensorscfg.moc.cpp lmsensorsdock.moc.cpp sensorslist.moc.cpp lmsensorswidget.moc.cpp panel.moc.cpp lmsensorsalarms.moc.cpp hdsensorslist.moc.cpp lmsensors.moc.cpp systemcfg.moc.cpp qbarmeter.moc.cpp cpupanel.moc.cpp palettecfg.moc.cpp lmsensorschip.moc.cpp uptimepanel.moc.cpp lmsensor.moc.cpp  generalcfgdesign.moc lmsensorscfgdesign.moc palettecfgdesign.moc systemcfgdesign.moc aboutcfgdesign.moc ksensors.moc
	@echo 'creating ksensors.all_cpp.cpp ...'; \
	rm -f ksensors.all_cpp.files ksensors.all_cpp.final; \
	echo "#define KDE_USE_FINAL 1" >> ksensors.all_cpp.final; \
	for file in main.cpp ksensors.cpp cpupanel.cpp cputimepanel.cpp generalcfg.cpp hdsensorslist.cpp i8ksensorslist.cpp infopanels.cpp ksensorscfg.cpp ksensorssplash.cpp lmsensor.cpp lmsensordockpanel.cpp lmsensorpanel.cpp lmsensorsalarms.cpp lmsensorscfg.cpp lmsensorschip.cpp lmsensors.cpp lmsensorsdock.cpp lmsensorswidget.cpp palettecfg.cpp panel.cpp panelsgroup.cpp processexec.cpp procinfo.cpp qbarmeter.cpp qdialarc.cpp qlcdraw.cpp qlcdstring.cpp rampanel.cpp sensor.cpp sensorslist.cpp systemcfg.cpp uptimepanel.cpp aboutcfgdesign.cpp generalcfgdesign.cpp lmsensorscfgdesign.cpp palettecfgdesign.cpp systemcfgdesign.cpp sensor.moc.cpp panelsgroup.moc.cpp i8ksensorslist.moc.cpp lmsensordockpanel.moc.cpp generalcfg.moc.cpp infopanels.moc.cpp ksensorscfg.moc.cpp qdialarc.moc.cpp qlcdstring.moc.cpp lmsensorpanel.moc.cpp ksensorssplash.moc.cpp processexec.moc.cpp lmsensorscfg.moc.cpp lmsensorsdock.moc.cpp sensorslist.moc.cpp lmsensorswidget.moc.cpp panel.moc.cpp lmsensorsalarms.moc.cpp hdsensorslist.moc.cpp lmsensors.moc.cpp systemcfg.moc.cpp qbarmeter.moc.cpp cpupanel.moc.cpp palettecfg.moc.cpp lmsensorschip.moc.cpp uptimepanel.moc.cpp lmsensor.moc.cpp ; do \
	  echo "#include \"$$file\"" >> ksensors.all_cpp.files; \
	  test ! -f $(srcdir)/$$file || egrep '^#pragma +implementation' $(srcdir)/$$file >> ksensors.all_cpp.final; \
	done; \
	cat ksensors.all_cpp.final ksensors.all_cpp.files > ksensors.all_cpp.cpp; \
	rm -f ksensors.all_cpp.final ksensors.all_cpp.files

#>+ 3
clean-final:
	-rm -f ksensors.all_cpp.cpp

#>+ 3
final:
	$(MAKE) ksensors_OBJECTS="$(ksensors_final_OBJECTS)" all-am

#>+ 3
final-install:
	$(MAKE) ksensors_OBJECTS="$(ksensors_final_OBJECTS)" install-am

#>+ 3
no-final:
	$(MAKE) ksensors_OBJECTS="$(ksensors_nofinal_OBJECTS)" all-am

#>+ 3
no-final-install:
	$(MAKE) ksensors_OBJECTS="$(ksensors_nofinal_OBJECTS)" install-am

#>+ 3
cvs-clean:
	$(MAKE) admindir=$(top_srcdir)/admin -f $(top_srcdir)/admin/Makefile.common cvs-clean

#>+ 3
kde-rpo-clean:
	-rm -f *.rpo

#>+ 38
$(srcdir)/cpupanel.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/i8ksensorslist.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/main.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/rampanel.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/ksensorssplash.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/systemcfg.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/qlcdraw.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
ksensors.o: ksensors.moc 
$(srcdir)/lmsensorsalarms.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/hdsensorslist.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/lmsensordockpanel.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/lmsensor.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/lmsensors.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/sensor.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
nmcheck-am: nmcheck
$(srcdir)/processexec.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/infopanels.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/qdialarc.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/uptimepanel.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
ksensors.lo: ksensors.moc 
$(srcdir)/procinfo.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/ksensorscfg.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/cputimepanel.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/qlcdstring.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/qbarmeter.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/generalcfg.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/lmsensorswidget.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/lmsensorsdock.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/ksensors.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/lmsensorschip.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/lmsensorscfg.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
nmcheck: 
$(srcdir)/panelsgroup.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/palettecfg.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/lmsensorpanel.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/panel.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 
$(srcdir)/sensorslist.cpp: aboutcfgdesign.h generalcfgdesign.h lmsensorscfgdesign.h palettecfgdesign.h systemcfgdesign.h 

#>+ 70
lmsensorscfgdesign.cpp: $(srcdir)/lmsensorscfgdesign.ui lmsensorscfgdesign.h lmsensorscfgdesign.moc
	rm -f lmsensorscfgdesign.cpp
	echo '#include <klocale.h>' > lmsensorscfgdesign.cpp
	$(UIC) -tr ${UIC_TR} -i lmsensorscfgdesign.h $(srcdir)/lmsensorscfgdesign.ui > lmsensorscfgdesign.cpp.temp ; ret=$$?; \
	sed -e "s,${UIC_TR}( \"\" ),QString::null,g" lmsensorscfgdesign.cpp.temp | sed -e "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | sed -e "s,image\([0-9][0-9]*\)_data,img\1_lmsensorscfgdesign,g" >> lmsensorscfgdesign.cpp ;\
	rm -f lmsensorscfgdesign.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "lmsensorscfgdesign.moc"' >> lmsensorscfgdesign.cpp; else rm -f lmsensorscfgdesign.cpp ; exit $$ret ; fi

lmsensorscfgdesign.h: $(srcdir)/lmsensorscfgdesign.ui
	$(UIC) -o lmsensorscfgdesign.h $(srcdir)/lmsensorscfgdesign.ui

lmsensorscfgdesign.moc: lmsensorscfgdesign.h
	$(MOC) lmsensorscfgdesign.h -o lmsensorscfgdesign.moc

aboutcfgdesign.cpp: $(srcdir)/aboutcfgdesign.ui aboutcfgdesign.h aboutcfgdesign.moc
	rm -f aboutcfgdesign.cpp
	echo '#include <klocale.h>' > aboutcfgdesign.cpp
	$(UIC) -tr ${UIC_TR} -i aboutcfgdesign.h $(srcdir)/aboutcfgdesign.ui > aboutcfgdesign.cpp.temp ; ret=$$?; \
	sed -e "s,${UIC_TR}( \"\" ),QString::null,g" aboutcfgdesign.cpp.temp | sed -e "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | sed -e "s,image\([0-9][0-9]*\)_data,img\1_aboutcfgdesign,g" >> aboutcfgdesign.cpp ;\
	rm -f aboutcfgdesign.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "aboutcfgdesign.moc"' >> aboutcfgdesign.cpp; else rm -f aboutcfgdesign.cpp ; exit $$ret ; fi

aboutcfgdesign.h: $(srcdir)/aboutcfgdesign.ui
	$(UIC) -o aboutcfgdesign.h $(srcdir)/aboutcfgdesign.ui

aboutcfgdesign.moc: aboutcfgdesign.h
	$(MOC) aboutcfgdesign.h -o aboutcfgdesign.moc

systemcfgdesign.cpp: $(srcdir)/systemcfgdesign.ui systemcfgdesign.h systemcfgdesign.moc
	rm -f systemcfgdesign.cpp
	echo '#include <klocale.h>' > systemcfgdesign.cpp
	$(UIC) -tr ${UIC_TR} -i systemcfgdesign.h $(srcdir)/systemcfgdesign.ui > systemcfgdesign.cpp.temp ; ret=$$?; \
	sed -e "s,${UIC_TR}( \"\" ),QString::null,g" systemcfgdesign.cpp.temp | sed -e "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | sed -e "s,image\([0-9][0-9]*\)_data,img\1_systemcfgdesign,g" >> systemcfgdesign.cpp ;\
	rm -f systemcfgdesign.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "systemcfgdesign.moc"' >> systemcfgdesign.cpp; else rm -f systemcfgdesign.cpp ; exit $$ret ; fi

systemcfgdesign.h: $(srcdir)/systemcfgdesign.ui
	$(UIC) -o systemcfgdesign.h $(srcdir)/systemcfgdesign.ui

systemcfgdesign.moc: systemcfgdesign.h
	$(MOC) systemcfgdesign.h -o systemcfgdesign.moc

palettecfgdesign.cpp: $(srcdir)/palettecfgdesign.ui palettecfgdesign.h palettecfgdesign.moc
	rm -f palettecfgdesign.cpp
	echo '#include <klocale.h>' > palettecfgdesign.cpp
	$(UIC) -tr ${UIC_TR} -i palettecfgdesign.h $(srcdir)/palettecfgdesign.ui > palettecfgdesign.cpp.temp ; ret=$$?; \
	sed -e "s,${UIC_TR}( \"\" ),QString::null,g" palettecfgdesign.cpp.temp | sed -e "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | sed -e "s,image\([0-9][0-9]*\)_data,img\1_palettecfgdesign,g" >> palettecfgdesign.cpp ;\
	rm -f palettecfgdesign.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "palettecfgdesign.moc"' >> palettecfgdesign.cpp; else rm -f palettecfgdesign.cpp ; exit $$ret ; fi

palettecfgdesign.h: $(srcdir)/palettecfgdesign.ui
	$(UIC) -o palettecfgdesign.h $(srcdir)/palettecfgdesign.ui

palettecfgdesign.moc: palettecfgdesign.h
	$(MOC) palettecfgdesign.h -o palettecfgdesign.moc

generalcfgdesign.cpp: $(srcdir)/generalcfgdesign.ui generalcfgdesign.h generalcfgdesign.moc
	rm -f generalcfgdesign.cpp
	echo '#include <klocale.h>' > generalcfgdesign.cpp
	$(UIC) -tr ${UIC_TR} -i generalcfgdesign.h $(srcdir)/generalcfgdesign.ui > generalcfgdesign.cpp.temp ; ret=$$?; \
	sed -e "s,${UIC_TR}( \"\" ),QString::null,g" generalcfgdesign.cpp.temp | sed -e "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | sed -e "s,image\([0-9][0-9]*\)_data,img\1_generalcfgdesign,g" >> generalcfgdesign.cpp ;\
	rm -f generalcfgdesign.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "generalcfgdesign.moc"' >> generalcfgdesign.cpp; else rm -f generalcfgdesign.cpp ; exit $$ret ; fi

generalcfgdesign.h: $(srcdir)/generalcfgdesign.ui
	$(UIC) -o generalcfgdesign.h $(srcdir)/generalcfgdesign.ui

generalcfgdesign.moc: generalcfgdesign.h
	$(MOC) generalcfgdesign.h -o generalcfgdesign.moc
